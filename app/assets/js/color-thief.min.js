;(function($, undefined) {

  'use strict';

  $.fn.primaryColor = function(opts) {

    opts = $.extend({
      skip: 5,            // з·ЏгЃЄг‚ЃгЃ™г‚‹гЃЁй‡ЌгЃ„гЃ®гЃ§ 5px йЈ›гЃ°гЃ—гЃ§иµ°жџ»гЃ™г‚‹
      exclude: ['0,0,0'], // й™¤е¤–гЃ™г‚‹и‰І гЃЄг‚“гЃ‹й»’гЃЊеЏ–еѕ—гЃ•г‚Њг‚‹гЃ®гЃ§гѓ‡гѓ•г‚©гѓ«гѓ€гЃ§иЁ­е®љгЃ—гЃЁгЃЏ
      callback: null
    }, opts);

    function _getContext() {
      return document.createElement('canvas').getContext('2d');
    }

    function _onload(img_obj, $target) {

      var context = _getContext();

      // canvas гЃ«з”»еѓЏг‚’жЏЏз”»
      context.drawImage(img_obj, 0, 0);

      // з”»еѓЏгѓ‡гѓјг‚їг‚’еЏ–еѕ—
      var image_data   = context.getImageData(0, 0, img_obj.width, img_obj.height),
          pixel_length = image_data.data.length,
          data         = image_data.data;

      var colors = {},        // еЏ–еѕ—гЃ—гЃџи‰ІгЃ®е‡єзЏѕе›ћж•°г‚’ж јзґЌгЃ—гЃ¦гЃЉгЃЏ
          primary_color = {   // гѓ—гѓ©г‚¤гѓћгѓЄг‚«гѓ©гѓјг‚’ж јзґЌ
            rgb: '',
            count: 0
          };

      // 1px гЃ”гЃЁгЃ«з”»еѓЏгѓ‡гѓјг‚їг‚’иµ°жџ»гЃ™г‚‹ ( 1px гЃ”гЃЁгЃ« rgba гЃ® 4 и¦Ѓзґ гЃ‚г‚‹ )
      for ( var px = 0; px < pixel_length; px = px + opts.skip * 4 ) {

        var rgb = [ data[px], data[px+1], data[px+2] ].join(',');

        // гЃ™гЃ§гЃ«еђЊгЃи‰ІгЃЊе‡єзЏѕгЃ—гЃ¦гЃ„г‚‹гЃ‹г‚«г‚¦гѓігѓ€гЃ™г‚‹
        // й™¤е¤–г‚«гѓ©гѓјгЃ«гЃ‚г‚‹г‚‚гЃ®гЃЇг‚«г‚¦гѓігѓ€гЃ—гЃЄгЃ„
        if ( !~$.inArray(rgb, opts.exclude) ) {
          if ( rgb in colors ) {
            colors[rgb]++;
          } else {
            colors[rgb] = 1;
          }
        }

        var count = colors[rgb];

        // дїќжЊЃгЃ—гЃ¦гЃ„г‚‹гѓ—гѓ©г‚¤гѓћгѓЄг‚«гѓ©гѓјг‚€г‚Ље‡єзЏѕе›ћж•°гЃЊе¤љгЃЏгЃЄгЃЈгЃџг‚‰е…Ґг‚Њж›їгЃ€
        if ( count > primary_color.count ) {
          primary_color.rgb = rgb;
          primary_color.count = count;
        }
      }

      $target.attr('data-primary-color', primary_color.rgb);

      if ( typeof opts.callback === 'function' ) {
        opts.callback.call($target[0], primary_color.rgb);
      }
    }

    this.each(function() {

      var $self = $(this),
          image = new Image(),
          color = $self.attr('data-primary-color');

      // гЃ™гЃ§гЃ«еЏ–еѕ—жё€гЃїгЃЄг‚‰ return;
      if ( color ) {
        if ( typeof opts.callback === 'function' ) {
          opts.callback.call($self[0], color);
        }
        return true;
      }

      $(image).on('load', function(e) {
        _onload(this, $self);
      });

      image.src = this.src || '';
    });

    return this;
  };
})(jQuery);